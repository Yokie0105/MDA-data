[{"name": "app.py", "content": "import pandas as pd\nimport plotly.graph_objects as go\nfrom shiny import App, render, ui, reactive\nimport plotly.io as pio\nfrom htmltools import HTML\n\n# Load dataset\ndf = pd.read_csv(\"https://raw.githubusercontent.com/Yokie0105/MDA-data/refs/heads/main/oscar_SciProject.csv\")\n\n# List of countries to choose from\ncountry_list = [\"ES\", \"FR\", \"EL\", \"IT\", \"DE\", \"BE\", \"NL\", \"SE\", \"UK\", \"NO\", \"AT\", \"FI\"]\n\n# UI\napp_ui = ui.page_fluid(\n    ui.h2(\"Sankey Diagram\"),\n    ui.input_select(\"country\", \"Select Country:\", choices=country_list, selected=\"BE\"),\n    ui.output_ui(\"sankey_plot\")\n)\n\n# Server\ndef server(input, output, session):\n\n    @reactive.calc\n    def filtered_data():\n        return df[df[\"country\"] == input.country()]\n\n    @output\n    @render.ui\n    def sankey_plot():\n        data = filtered_data()\n\n        # Get money percentages per city, field and activity type\n        total_money = data[\"ecMaxContribution\"].sum()\n        city_money = data.groupby(\"city\")[\"ecMaxContribution\"].sum() / total_money * 100\n        city_field_money = (data.groupby([\"city\", \"field\"])[\"ecMaxContribution\"].sum() / total_money) * 100\n        field_activity_money = (data.groupby([\"field\", \"activityType\"])[\"ecMaxContribution\"].sum() / total_money) * 100\n        \n        # Convert the city series to a dataframe\n        city_money_df = city_money.reset_index()\n        city_money_df.columns = ['City', 'Money']\n\n        # Filter for cities with more than 3% of total money\n        filtered_city_money = city_money[city_money > 3]  \n        filtered_cities = filtered_city_money.index\n\n        # Convert the city-field series to a dataframe\n        city_field_money_df = city_field_money.reset_index()\n        city_field_money_df.columns = ['City', 'Field', 'Money']\n\n        # Classify cities not in the filtered list as 'Other'\n        city_field_money_df['City'] = city_field_money_df['City'].apply(\n            lambda x: x if x in filtered_cities else 'Other')\n\n        # Regroup after merging to 'Other'\n        city_field_money_df = city_field_money_df.groupby(['City', 'Field'], as_index=False).sum()\n\n        # Convert the field-activity series to a dataframe\n        field_activity_money_df = field_activity_money.reset_index()\n        field_activity_money_df.columns = ['Field', 'ActivityType', 'Money']\n\n        # Create a list of unique labels\n        labels = ['ecMaxContribution'] + city_field_money_df['City'].unique().tolist() + city_field_money_df['Field'].unique().tolist() + field_activity_money_df['ActivityType'].unique().tolist()\n        label_to_index = {label: idx for idx, label in enumerate(labels)}\n\n        # Create two new DataFrames with the specified structure\n        # 1: ecMaxContribution \u279d City\n        links1 = pd.DataFrame({\n            'source': ['ecMaxContribution'] * city_field_money_df['City'].nunique(),\n            'target': city_field_money_df['City'].unique(),\n            'value': city_field_money_df.groupby('City')['Money'].sum().values\n        })\n\n        # 2: City \u279d Field\n        links2 = pd.DataFrame({\n            'source': city_field_money_df['City'],\n            'target': city_field_money_df['Field'],\n            'value': city_field_money_df['Money']\n        })\n\n        # 3: Field \u279d ActivityType\n        links3 = pd.DataFrame({\n            'source': field_activity_money_df['Field'],\n            'target': field_activity_money_df['ActivityType'],\n            'value': field_activity_money_df['Money']\n        })\n\n        # Map source and target columns to indices in the labels list\n        links1['source'] = links1['source'].map(label_to_index)\n        links1['target'] = links1['target'].map(label_to_index)\n\n        links2['source'] = links2['source'].map(label_to_index)\n        links2['target'] = links2['target'].map(label_to_index)\n\n        links3['source'] = links3['source'].map(label_to_index)\n        links3['target'] = links3['target'].map(label_to_index)\n\n        # Combine all the links\n        links = pd.concat([links1, links2, links3], ignore_index=True)\n\n        # Sankey chart\n        fig = go.Figure(data=[go.Sankey(\n            node=dict(\n                pad=15,\n                thickness=20,\n                line=dict(color=\"black\", width=0.5),\n                label=labels,\n                color=\"blue\"\n            ),\n            link=dict(\n                source=links[\"source\"],\n                target=links[\"target\"],\n                value=links[\"value\"]\n            )\n        )])\n\n        fig.update_layout(title_text=f\"Sankey Diagram for {input.country()}\", font_size=10)\n\n        # Return Plotly figure as HTML\n        return HTML(pio.to_html(fig, include_plotlyjs='cdn', full_html=False))\n\n# Run the app\napp = App(app_ui, server)\n", "type": "text"}]